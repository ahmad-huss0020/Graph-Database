// Preview of the graph database
match(n)
return n
limit 100


//Database schema (nodes and relationships)
CALL db.schema.visualization();


//Counts of nodes, node labels, relationships, relationship types, 
//property keys and statistics using the APOC library.
CALL apoc.meta.stats();


//Node labels and count
CALL db.labels() YIELD label
CALL apoc.cypher.run('MATCH (:`'+label+'`) RETURN count(*) as count', {})
YIELD value
RETURN label as Label, value.count AS Count


//Relationship types and count
CALL db.relationshipTypes() YIELD relationshipType as type
CALL apoc.cypher.run('MATCH ()-[:`'+type+'`]->() RETURN count(*) as count', {})
YIELD value
RETURN type AS Relationship, value.count AS Count


//Nb of streamers per their account creation year
MATCH (u:Stream)
WHERE u.createdAt IS NOT NULL
RETURN u.createdAt.year as year,
       count(*) as countOfNewStreamers
ORDER BY year;


//Games that have the highest count of streamers playing them
MATCH (g:Game)
RETURN g.name as game,
       count{ (g)<-[:PLAYS]-() } as number_of_streamers
ORDER BY number_of_streamers DESC
LIMIT 10


//Highest count of VIP relationships
MATCH (u:User)
RETURN u.name as user,
       count{ (u)-[:VIP]->() } as number_of_vips
ORDER BY number_of_vips DESC LIMIT 10;


//Highest count of moderators relationships
//Moderators (also known as mods) ensure that the chat meets the behavior and content standards set by the broadcaster by removing offensive posts and spam that detracts from conversations.
MATCH (u:User)
RETURN u.name as user,
       count{ (u)-[:MODERATOR]->() } as number_of_mods
ORDER BY number_of_mods DESC LIMIT 10;


//Matching five streamers and separately five users that chatted in the original streamer’s broadcast
MATCH (s:Stream)
WITH s LIMIT 1
CALL {
    WITH s
    MATCH p=(s)<--(:Stream)
    RETURN p
    LIMIT 5
    UNION
    WITH s
    MATCH p=(s)<--(:User)
    RETURN p
    LIMIT 5
}
RETURN p
//We can see that streamers behave like regular users. They can chat in other streamer’s broadcasts, be their moderator or VIP.


//Out degree of all nodes label
MATCH (n)
WITH n, labels(n) AS node_labels, COUNT{(n)-->()} AS out_degree
RETURN node_labels, apoc.agg.statistics(out_degree) AS out_degree_statistics
ORDER BY node_labels;


//In degree of all nodes label
MATCH (n)
WITH n, labels(n) AS node_labels, COUNT{(n)<--()} AS in_degree
RETURN node_labels, apoc.agg.statistics(in_degree) AS in_degree_statistics
ORDER BY node_labels;



-----------------------------------------------------------------------------------------------------------------------------------------------------------
GDS


//Projecting all User and Stream nodes and possible relationships between them (CHATTER, MODERATOR, and VIP)
CALL gds.graph.project('twitch',
  ['User', 'Stream'],
  ['CHATTER', 'VIP', 'MODERATOR'])


//Projecting all User, Stream and Game nodes and HAS_TEAM, PLAYS relationships between them
CALL gds.graph.project('twitch_games',
  ['User', 'Stream','Game'],
  ['HAS_TEAM','PLAYS'])

//Projecting all stream nodes with their followers property to use for the KNN
CALL gds.graph.project(
    'myGraph',
    {
        Stream: {
            properties: ['followers']
        }
    },
    '*'
);

//WCC on twitch
CALL gds.wcc.stats('twitch')
YIELD componentCount, componentDistribution


//WWC for stream nodes only
CALL gds.wcc.stats('twitch', {nodeLabels:['Stream']})
YIELD componentCount, componentDistribution

//WCC ON twitch_games
CALL gds.wcc.stats('twitch_games')
YIELD componentCount, componentDistribution

//WCC on twitch_games with only Game node
CALL gds.wcc.stats('twitch_games',{nodeLabels:['Game']})
YIELD componentCount, componentDistribution


//Page rank on entire twitch graph
CALL gds.pageRank.stream('twitch')
YIELD nodeId, score
WITH nodeId, score
ORDER BY score
DESC LIMIT 10
RETURN gds.util.asNode(nodeId).name as user, score


//Page rank on Stream nodes only
CALL gds.pageRank.stream('twitch', {nodeLabels:['Stream']})
YIELD nodeId, score
WITH nodeId, score
ORDER BY score
DESC LIMIT 10
WITH gds.util.asNode(nodeId) as node,score
RETURN node.name as streamer,
       score,
       count{ (node)<--(:Stream) } as relationships_from_streamers,
       count{ (node)<--(:User) } as relationships_from_users

//Eigenvector centrality on twitch projection
CALL gds.eigenvector.stream('twitch', {maxIterations: 25, tolerance: 1e-6})
YIELD nodeId, score
RETURN gds.util.asNode(nodeId).name as userOrStreamer, score
ORDER BY score DESC LIMIT 10

//Page Rank on twitch_games projection
CALL gds.pageRank.stream('twitch_games')
YIELD nodeId, score
WITH nodeId, score
ORDER BY score
DESC LIMIT 5
RETURN gds.util.asNode(nodeId).name as Game, score



//Detecting the Stream community on twitch projection
CALL gds.louvain.stream('twitch', {nodeLabels:['Stream']})
YIELD nodeId, communityId
RETURN communityId, count(*) as communitySize
ORDER BY communitySize DESC LIMIT 10


//LPA on twitch projection
CALL gds.labelPropagation.stream('twitch')
YIELD nodeId, communityId
RETURN communityId, count(*) as communitySize
ORDER BY communitySize DESC LIMIT 10



// LPA to identify user community
CALL gds.labelPropagation.stream('twitch', {nodeLabels:['User']})
YIELD nodeId, communityId
RETURN communityId, count(*) as communitySize
ORDER BY communitySize DESC LIMIT 10


//KNN on myGraph projection
CALL gds.knn.stream('myGraph', {
    topK: 1,
    nodeProperties: ['followers'],

    randomSeed: 1337,
    concurrency: 1,
    sampleRate: 1.0,
    deltaThreshold: 0.0
})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS User1, gds.util.asNode(node2).name AS User2, similarity
ORDER BY similarity DESCENDING, User1, User2


//Node similarity
//step 1 new tag
MATCH (s:Stream)-[:PLAYS]->(g:Game)
WHERE g.name in ["Fortnite", "Call of Duty:Warzone"]
SET s:FortniteCOD

//step 2 batch users
CALL apoc.periodic.iterate("
    MATCH (u:User)
    WHERE NOT u:Stream AND COUNT {(u)-->(:Stream)} > 1
    RETURN u",
    "SET u:Audience",
    {batchSize:50000, parallel:true}
)

//step 3 new projection
CALL gds.graph.project('shared-audience',
  ['FortniteCOD', 'Audience'],
  {CHATTERS: {type:'*', orientation:'REVERSE'}})

//node similarity algorithm
CALL gds.nodeSimilarity.mutate('shared-audience',
 {similarityMetric: 'Jaccard',similarityCutoff:0.05, topK:15, sudo:true,
     mutateProperty:'score', mutateRelationshipType:'SHARED_AUDIENCE'})

//Community
CALL gds.louvain.stream('shared-audience',
       { nodeLabels:['FortniteCOD'],
         relationshipTypes:['SHARED_AUDIENCE'],
         relationshipWeightProperty:'score'})
YIELD nodeId, communityId
RETURN communityId, count(*) as communitySize, collect(gds.util.asNode(nodeId).name) as members
ORDER BY communitySize DESC
LIMIT 5


